{"ast":null,"code":"/* global ʎɐɹɔosǝʌɹǝs */\n\n/**\n * Initializes a socket server for HMR for webpack-plugin-serve.\n * @param {function(*): void} messageHandler A handler to consume Webpack compilation messages.\n * @returns {void}\n */\nfunction initWPSSocket(messageHandler) {\n  /**\n   * The hard-coded options injection key from webpack-plugin-serve.\n   *\n   * [Ref](https://github.com/shellscape/webpack-plugin-serve/blob/aeb49f14e900802c98df4a4607a76bc67b1cffdf/lib/index.js#L258)\n   * @type {Object | undefined}\n   */\n  let options;\n\n  try {\n    options = ʎɐɹɔosǝʌɹǝs;\n  } catch (e) {\n    // Bail out because this indicates the plugin is not included\n    return;\n  }\n\n  const {\n    ClientSocket\n  } = require('webpack-plugin-serve/lib/client/ClientSocket');\n\n  const {\n    address,\n    client = {},\n    secure\n  } = options;\n  const protocol = secure ? 'wss' : 'ws';\n  const socket = new ClientSocket(client, protocol + '://' + (client.address || address) + '/wps');\n  socket.addEventListener('message', function listener(message) {\n    const {\n      action,\n      data\n    } = JSON.parse(message.data);\n\n    switch (action) {\n      case 'done':\n        {\n          messageHandler({\n            type: 'ok'\n          });\n          break;\n        }\n\n      case 'problems':\n        {\n          if (data.errors.length) {\n            messageHandler({\n              type: 'errors',\n              data: data.errors\n            });\n          } else if (data.warnings.length) {\n            messageHandler({\n              type: 'warnings',\n              data: data.warnings\n            });\n          }\n\n          break;\n        }\n\n      default:\n        {// Do nothing\n        }\n    }\n  });\n}\n\nmodule.exports = initWPSSocket;","map":{"version":3,"sources":["E:/JCA/Projects/Project-5/Grade-A/Front-End/node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/WPSSocket.js"],"names":["initWPSSocket","messageHandler","options","ʎɐɹɔosǝʌɹǝs","e","ClientSocket","require","address","client","secure","protocol","socket","addEventListener","listener","message","action","data","JSON","parse","type","errors","length","warnings","module","exports"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,CAAuBC,cAAvB,EAAuC;AACrC;AACF;AACA;AACA;AACA;AACA;AACE,MAAIC,OAAJ;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAGC,WAAV;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACA;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAmBC,OAAO,CAAC,8CAAD,CAAhC;;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAM,GAAG,EAApB;AAAwBC,IAAAA;AAAxB,MAAmCP,OAAzC;AACA,QAAMQ,QAAQ,GAAGD,MAAM,GAAG,KAAH,GAAW,IAAlC;AACA,QAAME,MAAM,GAAG,IAAIN,YAAJ,CAAiBG,MAAjB,EAAyBE,QAAQ,GAAG,KAAX,IAAoBF,MAAM,CAACD,OAAP,IAAkBA,OAAtC,IAAiD,MAA1E,CAAf;AAEAI,EAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAC5D,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAmBC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACE,IAAnB,CAAzB;;AAEA,YAAQD,MAAR;AACE,WAAK,MAAL;AAAa;AACXd,UAAAA,cAAc,CAAC;AAAEkB,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAd;AACA;AACD;;AACD,WAAK,UAAL;AAAiB;AACf,cAAIH,IAAI,CAACI,MAAL,CAAYC,MAAhB,EAAwB;AACtBpB,YAAAA,cAAc,CAAC;AAAEkB,cAAAA,IAAI,EAAE,QAAR;AAAkBH,cAAAA,IAAI,EAAEA,IAAI,CAACI;AAA7B,aAAD,CAAd;AACD,WAFD,MAEO,IAAIJ,IAAI,CAACM,QAAL,CAAcD,MAAlB,EAA0B;AAC/BpB,YAAAA,cAAc,CAAC;AAAEkB,cAAAA,IAAI,EAAE,UAAR;AAAoBH,cAAAA,IAAI,EAAEA,IAAI,CAACM;AAA/B,aAAD,CAAd;AACD;;AACD;AACD;;AACD;AAAS,SACP;AACD;AAfH;AAiBD,GApBD;AAqBD;;AAEDC,MAAM,CAACC,OAAP,GAAiBxB,aAAjB","sourcesContent":["/* global ʎɐɹɔosǝʌɹǝs */\n\n/**\n * Initializes a socket server for HMR for webpack-plugin-serve.\n * @param {function(*): void} messageHandler A handler to consume Webpack compilation messages.\n * @returns {void}\n */\nfunction initWPSSocket(messageHandler) {\n  /**\n   * The hard-coded options injection key from webpack-plugin-serve.\n   *\n   * [Ref](https://github.com/shellscape/webpack-plugin-serve/blob/aeb49f14e900802c98df4a4607a76bc67b1cffdf/lib/index.js#L258)\n   * @type {Object | undefined}\n   */\n  let options;\n  try {\n    options = ʎɐɹɔosǝʌɹǝs;\n  } catch (e) {\n    // Bail out because this indicates the plugin is not included\n    return;\n  }\n\n  const { ClientSocket } = require('webpack-plugin-serve/lib/client/ClientSocket');\n  const { address, client = {}, secure } = options;\n  const protocol = secure ? 'wss' : 'ws';\n  const socket = new ClientSocket(client, protocol + '://' + (client.address || address) + '/wps');\n\n  socket.addEventListener('message', function listener(message) {\n    const { action, data } = JSON.parse(message.data);\n\n    switch (action) {\n      case 'done': {\n        messageHandler({ type: 'ok' });\n        break;\n      }\n      case 'problems': {\n        if (data.errors.length) {\n          messageHandler({ type: 'errors', data: data.errors });\n        } else if (data.warnings.length) {\n          messageHandler({ type: 'warnings', data: data.warnings });\n        }\n        break;\n      }\n      default: {\n        // Do nothing\n      }\n    }\n  });\n}\n\nmodule.exports = initWPSSocket;\n"]},"metadata":{},"sourceType":"script"}