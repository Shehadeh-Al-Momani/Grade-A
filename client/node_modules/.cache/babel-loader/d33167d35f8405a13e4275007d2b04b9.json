{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport io from 'socket.io-client';\nlet socket;\n\nconst useChat = (otherUser, cuurentUser) => {\n  const [messages, setMessages] = useState([]); // Sent and received messages\n\n  const [oneMessage, setMessage] = useState([]);\n  useEffect(() => {\n    socket = io(`http://localhost:5000/`, {\n      query: {\n        otherUser,\n        cuurentUser\n      }\n    }); // Creates a WebSocket connection\n\n    axios.get(`http://localhost:5000/${cuurentUser}/${otherUser}`).then(res => {\n      setMessages(res.data);\n    }); // socket.emit('newMessage', { name, room });\n    // Listens for incoming messages\n\n    socket.on('newMessage', message => {\n      const incomingMessage = { ...message,\n        sender: message.senderId === socket.id ? 1 : 0\n      };\n      setMessage(incomingMessage);\n      axios.post('http://localhost:5000/messeges', incomingMessage).then(res => {\n        messages.push(incomingMessage);\n        setMessages(messages);\n      }).catch(err => {\n        console.log('ERR: ', err);\n      });\n    });\n    return () => {\n      socket.disconnect();\n    }; // Destroys the socket reference when the connection is closed\n  }, [oneMessage]); // Sends a message to the server that forwards it to all users in the same room\n\n  const sendMessage = (messageBody, id) => {\n    socket.emit('newMessage', {\n      message: messageBody,\n      senderId: socket.id,\n      insID: otherUser,\n      stuID: cuurentUser,\n      sender_id: id\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\nexport default useChat;","map":{"version":3,"sources":["E:/JCA/Projects/Project-5/Grade-A/Front-End/src/components/useChat.js"],"names":["useState","useEffect","axios","io","socket","useChat","otherUser","cuurentUser","messages","setMessages","oneMessage","setMessage","query","get","then","res","data","on","message","incomingMessage","sender","senderId","id","post","push","catch","err","console","log","disconnect","sendMessage","messageBody","emit","insID","stuID","sender_id"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,IAAIC,MAAJ;;AAEA,MAAMC,OAAO,GAAG,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AAC1C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC,CAD0C,CACI;;AAC9C,QAAM,CAACU,UAAD,EAAaC,UAAb,IAA2BX,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,GAAGD,EAAE,CAAE,wBAAF,EAA2B;AAAES,MAAAA,KAAK,EAAE;AAAEN,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAAT,KAA3B,CAAX,CADc,CACgE;;AAC9EL,IAAAA,KAAK,CAACW,GAAN,CAAW,yBAAwBN,WAAY,IAAGD,SAAU,EAA5D,EAA+DQ,IAA/D,CAAqEC,GAAD,IAAS;AAAEN,MAAAA,WAAW,CAACM,GAAG,CAACC,IAAL,CAAX;AAAwB,KAAvG,EAFc,CAGd;AAEA;;AACAZ,IAAAA,MAAM,CAACa,EAAP,CAAU,YAAV,EAAyBC,OAAD,IAAa;AACnC,YAAMC,eAAe,GAAG,EAAE,GAAGD,OAAL;AAAcE,QAAAA,MAAM,EAAGF,OAAO,CAACG,QAAR,KAAqBjB,MAAM,CAACkB,EAA7B,GAAmC,CAAnC,GAAuC;AAA7D,OAAxB;AACAX,MAAAA,UAAU,CAACQ,eAAD,CAAV;AAEAjB,MAAAA,KAAK,CAACqB,IAAN,CAAW,gCAAX,EAA6CJ,eAA7C,EACCL,IADD,CACOC,GAAD,IAAS;AACXP,QAAAA,QAAQ,CAACgB,IAAT,CAAcL,eAAd;AACAV,QAAAA,WAAW,CAACD,QAAD,CAAX;AACD,OAJH,EAKGiB,KALH,CAKUC,GAAD,IAAS;AAAEC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AAA2B,OAL/C;AAMD,KAVD;AAYA,WAAO,MAAM;AAAEtB,MAAAA,MAAM,CAACyB,UAAP;AAAqB,KAApC,CAlBc,CAkBwB;AACvC,GAnBQ,EAmBN,CAACnB,UAAD,CAnBM,CAAT,CAJ0C,CA0B1C;;AACA,QAAMoB,WAAW,GAAG,CAACC,WAAD,EAAcT,EAAd,KAAqB;AACvClB,IAAAA,MAAM,CAAC4B,IAAP,CAAY,YAAZ,EAA0B;AACxBd,MAAAA,OAAO,EAAEa,WADe;AAExBV,MAAAA,QAAQ,EAAEjB,MAAM,CAACkB,EAFO;AAGxBW,MAAAA,KAAK,EAAE3B,SAHiB;AAIxB4B,MAAAA,KAAK,EAAE3B,WAJiB;AAKxB4B,MAAAA,SAAS,EAAEb;AALa,KAA1B;AAOD,GARD;;AAUA,SAAO;AAAEd,IAAAA,QAAF;AAAYsB,IAAAA;AAAZ,GAAP;AACD,CAtCD;;AAwCA,eAAezB,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport io from 'socket.io-client';\r\nlet socket;\r\n\r\nconst useChat = (otherUser, cuurentUser) => {\r\n  const [messages, setMessages] = useState([]); // Sent and received messages\r\n  const [oneMessage, setMessage] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket = io(`http://localhost:5000/`, { query: { otherUser, cuurentUser } }); // Creates a WebSocket connection\r\n    axios.get(`http://localhost:5000/${cuurentUser}/${otherUser}`).then((res) => { setMessages(res.data); });\r\n    // socket.emit('newMessage', { name, room });\r\n\r\n    // Listens for incoming messages\r\n    socket.on('newMessage', (message) => {\r\n      const incomingMessage = { ...message, sender: (message.senderId === socket.id) ? 1 : 0 };\r\n      setMessage(incomingMessage);\r\n\r\n      axios.post('http://localhost:5000/messeges', incomingMessage) \r\n      .then((res) => {\r\n          messages.push(incomingMessage)\r\n          setMessages(messages);\r\n        })\r\n        .catch((err) => { console.log('ERR: ', err) })\r\n    });\r\n\r\n    return () => { socket.disconnect() }; // Destroys the socket reference when the connection is closed\r\n  }, [oneMessage])\r\n\r\n\r\n  // Sends a message to the server that forwards it to all users in the same room\r\n  const sendMessage = (messageBody, id) => {\r\n    socket.emit('newMessage', {\r\n      message: messageBody,\r\n      senderId: socket.id,\r\n      insID: otherUser,\r\n      stuID: cuurentUser,\r\n      sender_id: id\r\n    });\r\n  };\r\n\r\n  return { messages, sendMessage };\r\n};\r\n\r\nexport default useChat;\r\n"]},"metadata":{},"sourceType":"module"}