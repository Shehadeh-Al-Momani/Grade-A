{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport io from 'socket.io-client';\nimport jwt_decode from 'jwt-decode';\nlet token = localStorage.getItem('token');\nconst decoded = jwt_decode(token);\nlet socket;\n\nconst useChat = (insID, stuId) => {\n  const [messages, setMessages] = useState([]); // Sent and received messages\n\n  const [oneMessage, setMessage] = useState([]);\n  useEffect(() => {\n    socket = io(`http://localhost:5000/`, {\n      query: {\n        insID,\n        stuId\n      }\n    }); // Creates a WebSocket connection\n\n    axios.get(`http://localhost:5000/${stuId}/${insID}`).then(res => {\n      console.log('setMessages :', res.data);\n      setMessages(res.data);\n    });\n    socket.emit('newMessage', {\n      name,\n      room\n    }); // Listens for incoming messages\n\n    socket.on('newMessage', message => {\n      const incomingMessage = { ...message,\n        sender: message.senderId === socket.id ? 1 : 0\n      };\n      setMessage(incomingMessage);\n      axios.post('http://localhost:5000/messeges', incomingMessage).then(res => {\n        messages.push(incomingMessage);\n        setMessages(messages => [...messages, incomingMessage]);\n      }).catch(err => {\n        console.log('ERR: ', err);\n      });\n    });\n    return () => {\n      socket.disconnect();\n    }; // Destroys the socket reference when the connection is closed\n  }, [oneMessage]); // Sends a message to the server that forwards it to all users in the same room\n\n  const sendMessage = (newMessage, stuId, insID, cuurentUser) => {\n    socket.emit('newMessage', {\n      message: newMessage,\n      senderId: socket.id,\n      insID: insID,\n      stuID: stuId,\n      sender_id: cuurentUser\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\nexport default useChat;","map":{"version":3,"sources":["E:/JCA/Projects/Project-5/Grade-A/Front-End/src/components/useChat.js"],"names":["useState","useEffect","axios","io","jwt_decode","token","localStorage","getItem","decoded","socket","useChat","insID","stuId","messages","setMessages","oneMessage","setMessage","query","get","then","res","console","log","data","emit","name","room","on","message","incomingMessage","sender","senderId","id","post","push","catch","err","disconnect","sendMessage","newMessage","cuurentUser","stuID","sender_id"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,MAAMC,OAAO,GAAGJ,UAAU,CAACC,KAAD,CAA1B;AACA,IAAII,MAAJ;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC,CADgC,CACc;;AAC9C,QAAM,CAACe,UAAD,EAAaC,UAAb,IAA2BhB,QAAQ,CAAC,EAAD,CAAzC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,GAAGN,EAAE,CAAE,wBAAF,EAA2B;AAAEc,MAAAA,KAAK,EAAE;AAAEN,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAT,KAA3B,CAAX,CADc,CACsD;;AAEpEV,IAAAA,KAAK,CAACgB,GAAN,CAAW,yBAAwBN,KAAM,IAAGD,KAAM,EAAlD,EACGQ,IADH,CACSC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAAG,CAACG,IAAjC;AACAT,MAAAA,WAAW,CAACM,GAAG,CAACG,IAAL,CAAX;AACD,KAJH;AAKAd,IAAAA,MAAM,CAACe,IAAP,CAAY,YAAZ,EAA0B;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAA1B,EARc,CAWd;;AACAjB,IAAAA,MAAM,CAACkB,EAAP,CAAU,YAAV,EAAyBC,OAAD,IAAa;AACnC,YAAMC,eAAe,GAAG,EAAE,GAAGD,OAAL;AAAcE,QAAAA,MAAM,EAAGF,OAAO,CAACG,QAAR,KAAqBtB,MAAM,CAACuB,EAA7B,GAAmC,CAAnC,GAAuC;AAA7D,OAAxB;AACAhB,MAAAA,UAAU,CAACa,eAAD,CAAV;AACA3B,MAAAA,KAAK,CAAC+B,IAAN,CAAW,gCAAX,EAA6CJ,eAA7C,EACGV,IADH,CACSC,GAAD,IAAS;AACbP,QAAAA,QAAQ,CAACqB,IAAT,CAAcL,eAAd;AACAf,QAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcgB,eAAd,CAAf,CAAX;AACD,OAJH,EAKGM,KALH,CAKUC,GAAD,IAAS;AAAEf,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBc,GAArB;AAA2B,OAL/C;AAMD,KATD;AAWA,WAAO,MAAM;AAAE3B,MAAAA,MAAM,CAAC4B,UAAP;AAAqB,KAApC,CAvBc,CAuBwB;AACvC,GAxBQ,EAwBN,CAACtB,UAAD,CAxBM,CAAT,CAHgC,CA8BhC;;AACA,QAAMuB,WAAW,GAAG,CAACC,UAAD,EAAa3B,KAAb,EAAoBD,KAApB,EAA2B6B,WAA3B,KAA2C;AAC7D/B,IAAAA,MAAM,CAACe,IAAP,CAAY,YAAZ,EAA0B;AACxBI,MAAAA,OAAO,EAAEW,UADe;AAExBR,MAAAA,QAAQ,EAAEtB,MAAM,CAACuB,EAFO;AAGxBrB,MAAAA,KAAK,EAAEA,KAHiB;AAIxB8B,MAAAA,KAAK,EAAE7B,KAJiB;AAKxB8B,MAAAA,SAAS,EAAEF;AALa,KAA1B;AAOD,GARD;;AAUA,SAAO;AAAE3B,IAAAA,QAAF;AAAYyB,IAAAA;AAAZ,GAAP;AACD,CA1CD;;AA4CA,eAAe5B,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport io from 'socket.io-client';\r\nimport jwt_decode from 'jwt-decode';\r\nlet token = localStorage.getItem('token');\r\nconst decoded = jwt_decode(token);\r\nlet socket;\r\n\r\nconst useChat = (insID, stuId) => {\r\n  const [messages, setMessages] = useState([]); // Sent and received messages\r\n  const [oneMessage, setMessage] = useState([]);\r\n  useEffect(() => {\r\n    socket = io(`http://localhost:5000/`, { query: { insID, stuId } }); // Creates a WebSocket connection\r\n\r\n    axios.get(`http://localhost:5000/${stuId}/${insID}`)\r\n      .then((res) => {\r\n        console.log('setMessages :', res.data)\r\n        setMessages(res.data);\r\n      });\r\n    socket.emit('newMessage', { name, room });\r\n\r\n\r\n    // Listens for incoming messages\r\n    socket.on('newMessage', (message) => {\r\n      const incomingMessage = { ...message, sender: (message.senderId === socket.id) ? 1 : 0 };\r\n      setMessage(incomingMessage);\r\n      axios.post('http://localhost:5000/messeges', incomingMessage)\r\n        .then((res) => {\r\n          messages.push(incomingMessage)\r\n          setMessages((messages) => [...messages, incomingMessage]);\r\n        })\r\n        .catch((err) => { console.log('ERR: ', err) })\r\n    });\r\n\r\n    return () => { socket.disconnect() }; // Destroys the socket reference when the connection is closed\r\n  }, [oneMessage])\r\n\r\n\r\n  // Sends a message to the server that forwards it to all users in the same room\r\n  const sendMessage = (newMessage, stuId, insID, cuurentUser) => {\r\n    socket.emit('newMessage', {\r\n      message: newMessage,\r\n      senderId: socket.id,\r\n      insID: insID,\r\n      stuID: stuId,\r\n      sender_id: cuurentUser\r\n    });\r\n  };\r\n\r\n  return { messages, sendMessage };\r\n};\r\n\r\nexport default useChat;\r\n"]},"metadata":{},"sourceType":"module"}