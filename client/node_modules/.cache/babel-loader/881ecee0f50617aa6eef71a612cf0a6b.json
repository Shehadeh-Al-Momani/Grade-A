{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport io from 'socket.io-client';\nimport jwt_decode from 'jwt-decode';\nlet token = localStorage.getItem('token');\nconst decoded = jwt_decode(token);\nlet socket;\n\nconst useChat = (insID, stuId) => {\n  const [messages, setMessages] = useState([]); // Sent and received messages\n\n  const [oneMessage, setMessage] = useState([]);\n  useEffect(() => {\n    axios.get(`http://localhost:5000/${stuId}/${insID}`).then(res => {\n      console.log('setMessages :', res.data);\n      setMessages(res.data);\n    });\n  }, []);\n  useEffect(() => {\n    socket = io(`http://localhost:5000/`, {\n      query: {\n        insID,\n        stuId\n      }\n    }); // Creates a WebSocket connection\n    // Listens for incoming messages\n\n    socket.on('newMessage', message => {\n      setMessage(message);\n      axios.post('http://localhost:5000/messeges', ...message).then(res => {\n        messages.push(...message);\n        setMessages(messages => [...messages, ...message]);\n      }).catch(err => {\n        console.log('ERR: ', err);\n      });\n    });\n    return () => {\n      socket.disconnect();\n    }; // Destroys the socket reference when the connection is closed\n  }, [oneMessage]); // Sends a message to the server that forwards it to all users in the same room\n\n  const sendMessage = (newMessage, stuId, insID, cuurentUser) => {\n    socket.emit('newMessage', {\n      message: newMessage,\n      insID: insID,\n      stuID: stuId,\n      sender_id: cuurentUser,\n      sender: stuId === cuurentUser ? 1 : 0\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\nexport default useChat;","map":{"version":3,"sources":["E:/JCA/Projects/Project-5/Grade-A/Front-End/src/components/useChat.js"],"names":["useState","useEffect","axios","io","jwt_decode","token","localStorage","getItem","decoded","socket","useChat","insID","stuId","messages","setMessages","oneMessage","setMessage","get","then","res","console","log","data","query","on","message","post","push","catch","err","disconnect","sendMessage","newMessage","cuurentUser","emit","stuID","sender_id","sender"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,MAAMC,OAAO,GAAGJ,UAAU,CAACC,KAAD,CAA1B;AACA,IAAII,MAAJ;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAChC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC,CADgC,CACc;;AAC9C,QAAM,CAACe,UAAD,EAAaC,UAAb,IAA2BhB,QAAQ,CAAC,EAAD,CAAzC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAACe,GAAN,CAAW,yBAAwBL,KAAM,IAAGD,KAAM,EAAlD,EACGO,IADH,CACSC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAAG,CAACG,IAAjC;AACAR,MAAAA,WAAW,CAACK,GAAG,CAACG,IAAL,CAAX;AACD,KAJH;AAKD,GANQ,EAMN,EANM,CAAT;AAQArB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,GAAGN,EAAE,CAAE,wBAAF,EAA2B;AAAEoB,MAAAA,KAAK,EAAE;AAAEZ,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAT,KAA3B,CAAX,CADc,CACsD;AAEpE;;AACAH,IAAAA,MAAM,CAACe,EAAP,CAAU,YAAV,EAAyBC,OAAD,IAAa;AACnCT,MAAAA,UAAU,CAACS,OAAD,CAAV;AACAvB,MAAAA,KAAK,CAACwB,IAAN,CAAW,gCAAX,EAA6C,GAAGD,OAAhD,EACGP,IADH,CACSC,GAAD,IAAS;AACbN,QAAAA,QAAQ,CAACc,IAAT,CAAc,GAAGF,OAAjB;AACAX,QAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAc,GAAGY,OAAjB,CAAf,CAAX;AACD,OAJH,EAKGG,KALH,CAKUC,GAAD,IAAS;AAAET,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBQ,GAArB;AAA2B,OAL/C;AAMD,KARD;AAUA,WAAO,MAAM;AAAEpB,MAAAA,MAAM,CAACqB,UAAP;AAAqB,KAApC,CAdc,CAcwB;AACvC,GAfQ,EAeN,CAACf,UAAD,CAfM,CAAT,CAZgC,CA8BhC;;AACA,QAAMgB,WAAW,GAAG,CAACC,UAAD,EAAapB,KAAb,EAAoBD,KAApB,EAA2BsB,WAA3B,KAA2C;AAC7DxB,IAAAA,MAAM,CAACyB,IAAP,CAAY,YAAZ,EAA0B;AACxBT,MAAAA,OAAO,EAAEO,UADe;AAExBrB,MAAAA,KAAK,EAAEA,KAFiB;AAGxBwB,MAAAA,KAAK,EAAEvB,KAHiB;AAIxBwB,MAAAA,SAAS,EAAEH,WAJa;AAKxBI,MAAAA,MAAM,EAAGzB,KAAK,KAAKqB,WAAX,GAA0B,CAA1B,GAA8B;AALd,KAA1B;AAQD,GATD;;AAWA,SAAO;AAAEpB,IAAAA,QAAF;AAAYkB,IAAAA;AAAZ,GAAP;AACD,CA3CD;;AA6CA,eAAerB,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport io from 'socket.io-client';\r\nimport jwt_decode from 'jwt-decode';\r\nlet token = localStorage.getItem('token');\r\nconst decoded = jwt_decode(token);\r\nlet socket;\r\n\r\nconst useChat = (insID, stuId) => {\r\n  const [messages, setMessages] = useState([]); // Sent and received messages\r\n  const [oneMessage, setMessage] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`http://localhost:5000/${stuId}/${insID}`)\r\n      .then((res) => {\r\n        console.log('setMessages :', res.data)\r\n        setMessages(res.data);\r\n      });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    socket = io(`http://localhost:5000/`, { query: { insID, stuId } }); // Creates a WebSocket connection\r\n\r\n    // Listens for incoming messages\r\n    socket.on('newMessage', (message) => {\r\n      setMessage(message);\r\n      axios.post('http://localhost:5000/messeges', ...message)\r\n        .then((res) => {\r\n          messages.push(...message)\r\n          setMessages((messages) => [...messages, ...message]);\r\n        })\r\n        .catch((err) => { console.log('ERR: ', err) })\r\n    });\r\n\r\n    return () => { socket.disconnect() }; // Destroys the socket reference when the connection is closed\r\n  }, [oneMessage])\r\n\r\n\r\n  // Sends a message to the server that forwards it to all users in the same room\r\n  const sendMessage = (newMessage, stuId, insID, cuurentUser) => {\r\n    socket.emit('newMessage', {\r\n      message: newMessage,\r\n      insID: insID,\r\n      stuID: stuId,\r\n      sender_id: cuurentUser,\r\n      sender: (stuId === cuurentUser) ? 1 : 0\r\n    }\r\n    );\r\n  };\r\n\r\n  return { messages, sendMessage };\r\n};\r\n\r\nexport default useChat;\r\n"]},"metadata":{},"sourceType":"module"}